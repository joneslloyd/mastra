name: Build and Release Mastra with Schema Fixes

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.7.0  # Use minimum required version

      - name: Install dependencies (skip scripts and hooks)
        run: |
          # Skip preinstall scripts and git hooks to avoid linting issues
          pnpm install --ignore-scripts --no-frozen-lockfile
        env:
          HUSKY: 0  # Disable git hooks

      - name: Build all packages (ignore errors)
        run: |
          # Build core packages that are needed, continue on errors
          set +e  # Don't exit on errors

          echo "Building @mastra/core..."
          pnpm --filter @mastra/core run build || echo "Core build failed, continuing..."

          echo "Building @mastra/evals..."
          pnpm --filter @mastra/evals run build || echo "Evals build failed, continuing..."

          echo "Building @mastra/libsql..."
          pnpm --filter @mastra/libsql run build || echo "Libsql build failed, continuing..."

          echo "Building @mastra/loggers..."
          pnpm --filter @mastra/loggers run build || echo "Loggers build failed, continuing..."

          echo "Building @mastra/mcp..."
          pnpm --filter @mastra/mcp run build || echo "MCP build failed, continuing..."

          echo "Building @mastra/memory..."
          pnpm --filter @mastra/memory run build || echo "Memory build failed, continuing..."

      - name: Create tarball of built packages
        run: |
          mkdir -p release-artifacts

          # Create tarballs for each package, including both src and dist if they exist
          echo "Creating tarballs..."

          cd packages
          for pkg in core evals libsql loggers mcp memory; do
            if [ -d "$pkg" ]; then
              echo "Processing package: $pkg"
              cd "$pkg"

              # Include both src and dist directories, plus package.json
              tar_files=""
              [ -d "dist" ] && tar_files="$tar_files dist/"
              [ -d "src" ] && tar_files="$tar_files src/"
              [ -f "package.json" ] && tar_files="$tar_files package.json"
              [ -f "tsconfig.json" ] && tar_files="$tar_files tsconfig.json"

              if [ -n "$tar_files" ]; then
                tar -czf "../../release-artifacts/mastra-$pkg.tar.gz" $tar_files
                echo "Created tarball for $pkg with: $tar_files"
              else
                echo "No files found for $pkg"
              fi

              cd ..
            fi
          done

      - name: List created artifacts
        run: |
          echo "Created artifacts:"
          ls -la release-artifacts/

          echo "Checking tarball contents:"
          for tarball in release-artifacts/*.tar.gz; do
            if [ -f "$tarball" ]; then
              echo "Contents of $tarball:"
              tar -tzf "$tarball" | head -20
              echo "---"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
          name: "Mastra with Schema Validation Fixes ${{ github.ref_name }}"
          body: |
            ðŸ”§ **Mastra Fork with DataForSEO Schema Validation Fixes**

            This release contains pre-built Mastra packages with fixes for DataForSEO MCP tool schema validation issues.

            **What's Fixed:**
            - âœ… Schema validation for DataForSEO MCP tools
            - âœ… All 24 DataForSEO tools should now work properly
            - âœ… Source code and built dist/ folders included (where available)

            **How to use:**
            Download the tarballs and extract them, or reference them directly in your package.json:

            ```json
            {
              "@mastra/core": "https://github.com/joneslloyd/mastra/releases/download/${{ github.ref_name }}/mastra-core.tar.gz",
              "@mastra/evals": "https://github.com/joneslloyd/mastra/releases/download/${{ github.ref_name }}/mastra-evals.tar.gz",
              "@mastra/libsql": "https://github.com/joneslloyd/mastra/releases/download/${{ github.ref_name }}/mastra-libsql.tar.gz",
              "@mastra/loggers": "https://github.com/joneslloyd/mastra/releases/download/${{ github.ref_name }}/mastra-loggers.tar.gz",
              "@mastra/mcp": "https://github.com/joneslloyd/mastra/releases/download/${{ github.ref_name }}/mastra-mcp.tar.gz",
              "@mastra/memory": "https://github.com/joneslloyd/mastra/releases/download/${{ github.ref_name }}/mastra-memory.tar.gz"
            }
            ```

            **Note:** This build may include source files if dist builds failed. The packages should still work for the schema validation fixes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
